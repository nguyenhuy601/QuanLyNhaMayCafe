const PaymentVoucher = require("../models/PaymentVoucher");

/** L·∫•y danh s√°ch phi·∫øu thanh to√°n */
exports.getAllVouchers = async (req, res) => {
  try {
    const vouchers = await PaymentVoucher.find()
      .populate("nhaCungCap nguoiLap nguoiDuyet lienKetPhieu")
      .sort({ ngayLap: -1 });
    res.status(200).json(vouchers);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

/** T·∫°o phi·∫øu thanh to√°n m·ªõi */
exports.createVoucher = async (req, res) => {
  try {
    const voucher = await PaymentVoucher.create(req.body);
    res.status(201).json({ message: "T·∫°o phi·∫øu thanh to√°n th√†nh c√¥ng", voucher });

    // üöÄ TODO: G·ª≠i event PAYMENT_CREATED ƒë·∫øn material-service ho·∫∑c hr-service ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ chi
    // RabbitMQ.publish("PAYMENT_CREATED", voucher);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

/** C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu (ƒë√£ duy·ªát / t·ª´ ch·ªëi / ƒë√£ chi) */
exports.updateVoucherStatus = async (req, res) => {
  try {
    const updated = await PaymentVoucher.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu thanh to√°n" });
    res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu th√†nh c√¥ng", voucher: updated });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

/** X√≥a phi·∫øu (n·∫øu ch∆∞a duy·ªát) */
exports.deleteVoucher = async (req, res) => {
  try {
    const voucher = await PaymentVoucher.findById(req.params.id);
    if (!voucher) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y phi·∫øu" });

    if (voucher.trangThai === "ƒê√£ duy·ªát")
      return res.status(400).json({ message: "Kh√¥ng th·ªÉ x√≥a phi·∫øu ƒë√£ duy·ªát" });

    await PaymentVoucher.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "X√≥a phi·∫øu thanh to√°n th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
