const Order = require("../models/Order");

/** Láº¥y danh sÃ¡ch Ä‘Æ¡n hÃ ng */
exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate("khachHang nguoiTao danhSachSanPham.sanPham")
      .sort({ ngayDat: -1 });
    res.status(200).json(orders);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

/** Táº¡o Ä‘Æ¡n hÃ ng má»›i */
exports.createOrder = async (req, res) => {
  try {
    const order = await Order.create(req.body);
    res.status(201).json({ message: "Táº¡o Ä‘Æ¡n hÃ ng thÃ nh cÃ´ng", order });

    // ğŸš€ TODO: gá»­i event ORDER_CREATED Ä‘áº¿n production-service Ä‘á»ƒ táº¡o káº¿ hoáº¡ch
    // VÃ­ dá»¥: RabbitMQ.publish("ORDER_CREATED", order);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

/** Cáº­p nháº­t tráº¡ng thÃ¡i Ä‘Æ¡n hÃ ng (Ä‘Ã£ duyá»‡t / há»§y / hoÃ n táº¥t) */
exports.updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const updated = await Order.findByIdAndUpdate(id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: "KhÃ´ng tÃ¬m tháº¥y Ä‘Æ¡n hÃ ng" });
    res.status(200).json({ message: "Cáº­p nháº­t Ä‘Æ¡n hÃ ng thÃ nh cÃ´ng", order: updated });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
